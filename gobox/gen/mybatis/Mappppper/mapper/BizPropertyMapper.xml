<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://raw.githubusercontent.com/ltto/GoMybatis/master/mybatis-3-mapper.dtd">
<mapper>
    <!--logic_enable 逻辑删除字段-->
    <!--logic_deleted 逻辑删除已删除字段-->
    <!--logic_undelete 逻辑删除 未删除字段-->
    <!--version_enable 乐观锁版本字段,支持int,int8,int16,int32,int64-->
    <resultMap id="BaseResultMap" tables="biz_user_address">
        <id column="id" property="Id" langType="string"/>
        <result column="user_id" property="UserId" langType="string"/>
        <result column="total_amount" property="TotalAmount" langType="float64"/>
        <result column="total_profit" property="TotalProfit" langType="float64"/>
        <result column="can_use_amount" property="CanUseAmount" langType="float64"/>
        <result column="freeze" property="Freeze" langType="float64"/>
        <result column="pool_total_amount" property="PoolTotalAmount" langType="float64"/>
        <result column="pool_amount" property="PoolAmount" langType="float64"/>
        <result column="pool_profit" property="PoolProfit" langType="float64"/>
        <result column="pool_freeze" property="PoolFreeze" langType="float64"/>
        <result column="accumulation_profit" property="AccumulationProfit" langType="float64"/>
        <result column="integral" property="Integral" langType="float64"/>
        <result column="create_time" property="CreateTime" langType="time.Time"/>
        <result column="update_time" property="UpdateTime" langType="time.Time"/>
        <result column="status" property="Status" langType="int"/>
        <result column="delete_flag" property="DeleteFlag" langType="int"/>

    </resultMap>

    <sql id="base">
        `id`, `user_id`, `total_amount`, `total_profit`, `can_use_amount`, `freeze`, `pool_total_amount`, `pool_amount`, `pool_profit`, `pool_freeze`, `accumulation_profit`, `integral`, `create_time`, `update_time`, `status`, `delete_flag`
    </sql>
    <!-- insert -->
    <insert id="Save" useGeneratedKeys="true">
        INSERT INTO `biz_property`(<include refid="base"/>) VALUES( null, #{obj.UserId}, #{obj.TotalAmount}, #{obj.TotalProfit}, #{obj.CanUseAmount}, #{obj.Freeze}, #{obj.PoolTotalAmount}, #{obj.PoolAmount}, #{obj.PoolProfit}, #{obj.PoolFreeze}, #{obj.AccumulationProfit}, #{obj.Integral}, #{obj.CreateTime}, #{obj.UpdateTime}, #{obj.Status}, #{obj.DeleteFlag})
    </insert>
    <!-- selectOne -->
    <select id="SelectByID">
        SELECT
        <include refid="base"/>
        FROM `biz_property` WhERE `id` = #{id}
    </select>

    <select id="SelectLimit">
        SELECT
        <include refid="base"/>
        FROM `biz_property`
        limit #{o},#{l}
    </select>

	<select id="SelectCount">
        SELECT count(1) FROM `biz_property`
    </select>

    <!-- update -->
    <update id="UpdateByID">
        UPDATE `biz_property` SET `id`=#{obj.id} 
        <if test="obj.Id.Valid">,`id` = #{obj.Id}</if>
        <if test="obj.UserId.Valid">,`user_id` = #{obj.UserId}</if>
        <if test="obj.TotalAmount.Valid">,`total_amount` = #{obj.TotalAmount}</if>
        <if test="obj.TotalProfit.Valid">,`total_profit` = #{obj.TotalProfit}</if>
        <if test="obj.CanUseAmount.Valid">,`can_use_amount` = #{obj.CanUseAmount}</if>
        <if test="obj.Freeze.Valid">,`freeze` = #{obj.Freeze}</if>
        <if test="obj.PoolTotalAmount.Valid">,`pool_total_amount` = #{obj.PoolTotalAmount}</if>
        <if test="obj.PoolAmount.Valid">,`pool_amount` = #{obj.PoolAmount}</if>
        <if test="obj.PoolProfit.Valid">,`pool_profit` = #{obj.PoolProfit}</if>
        <if test="obj.PoolFreeze.Valid">,`pool_freeze` = #{obj.PoolFreeze}</if>
        <if test="obj.AccumulationProfit.Valid">,`accumulation_profit` = #{obj.AccumulationProfit}</if>
        <if test="obj.Integral.Valid">,`integral` = #{obj.Integral}</if>
        <if test="obj.CreateTime.Valid">,`create_time` = #{obj.CreateTime}</if>
        <if test="obj.UpdateTime.Valid">,`update_time` = #{obj.UpdateTime}</if>
        <if test="obj.Status.Valid">,`status` = #{obj.Status}</if>
        <if test="obj.DeleteFlag.Valid">,`delete_flag` = #{obj.DeleteFlag}</if>
        WHERE `id`=#{obj.id}
    </update>

    <!--delete one-->
    <delete id="DeleteByID">
        delete FROM `biz_property` WHERE `id`=#{id}
    </delete>

    <!-- delete list -->
    <delete id="DeleteByIDs">
        delete FROM `biz_property` WHERE `id` in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">#{item}</foreach>
    </delete>
</mapper>
